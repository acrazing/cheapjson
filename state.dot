digraph JSON {
  stateStart [ label="开始" ];
  stateNone [ label="初始状态" ];
  stateString [ label="字符串" ];
  stateArrayValueOrEnd [ label="array 开始" ];
  stateArrayEndOrComma [ label="array 等待, ]" ];
  stateObjectKeyOrEnd [ label="object 开始" ];
  stateObjectColon [ label="object 必需是 :" ];
  stateObjectEndOrComma [ label="object 等待, }" ];
  stateObjectKey [ label="object 必需是key" ];
  stateParent [ label="当前元素结束, 处理父层元素" ];
  stateEnd [ label="结束" ];

  stateStart -> stateNone [ label="初始化", color="red" ];
  stateNone -> stateParent [ label="true\nfalse\nnull\nnumber", color="blue" ];
  stateNone -> stateString [ label="\"", color="black" ];
  stateString -> stateParent [ label="\"", color="blue" ];
  stateNone -> stateArrayValueOrEnd [ label="[", color="black" ];
  stateNone -> stateObjectKeyOrEnd [ label="{", color="black" ];
  stateArrayValueOrEnd -> stateNone [ label="not ]", color="red" ];
  stateArrayValueOrEnd -> stateArrayEndOrComma [ label="not ]", color="black" ];
  stateArrayValueOrEnd -> stateParent [ label="]", color="blue" ];
  stateArrayEndOrComma -> stateNone [ label=",", color="red" ];
  stateArrayEndOrComma -> stateArrayEndOrComma [ label=",", color="black" ];
  stateArrayEndOrComma -> stateParent [ label="]", color="blue" ];
  stateObjectKeyOrEnd -> stateParent [ label="}", color="blue" ];
  stateObjectKeyOrEnd -> stateObjectKey [ label="not }", color="black" ];
  stateObjectKey -> stateObjectColon [ label="收到 key", color="red" ];
  stateObjectKey -> stateObjectEndOrComma [ label="收到 key", color="black" ];
  stateObjectEndOrComma -> stateParent [ label="}", color="blue" ];
  stateObjectEndOrComma -> stateObjectKey [ label=",", color="black" ];
  stateObjectColon -> stateNone [ label="收到 :", color="black" ];
  stateParent -> stateEnd [ label="已经是顶层", color="blue" ];
}
