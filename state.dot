digraph JSON {
  stateStart [ label="Start" ];
  stateNone [ label="New Value" ];
  stateString [ label="String" ];
  stateArrayValueOrEnd [ label="New Array" ];
  stateArrayEndOrComma [ label="In Array" ];
  stateObjectKeyOrEnd [ label="New Object" ];
  stateObjectColon [ label="Object Value Leading :" ];
  stateObjectEndOrComma [ label="In Object" ];
  stateObjectKey [ label="Object Asking Key String Literal" ];
  stateParent [ label="Finish current, back to upon" ];
  stateEnd [ label="Finish" ];

  stateStart -> stateNone [ label="Initialize", color="red" ];
  stateNone -> stateParent [ label="true\nfalse\nnull\nnumber", color="blue" ];
  stateNone -> stateString [ label="\"", color="black" ];
  stateString -> stateParent [ label="\"", color="blue" ];
  stateNone -> stateArrayValueOrEnd [ label="[", color="black" ];
  stateNone -> stateObjectKeyOrEnd [ label="{", color="black" ];
  stateArrayValueOrEnd -> stateNone [ label="Not ]", color="red" ];
  stateArrayValueOrEnd -> stateArrayEndOrComma [ label="Not ]", color="black" ];
  stateArrayValueOrEnd -> stateParent [ label="]", color="blue" ];
  stateArrayEndOrComma -> stateNone [ label=",", color="red" ];
  stateArrayEndOrComma -> stateArrayEndOrComma [ label=",", color="black" ];
  stateArrayEndOrComma -> stateParent [ label="]", color="blue" ];
  stateObjectKeyOrEnd -> stateParent [ label="}", color="blue" ];
  stateObjectKeyOrEnd -> stateObjectKey [ label="Not }", color="black" ];
  stateObjectKey -> stateObjectColon [ label="Read key", color="red" ];
  stateObjectKey -> stateObjectEndOrComma [ label="Read key", color="black" ];
  stateObjectEndOrComma -> stateParent [ label="}", color="blue" ];
  stateObjectEndOrComma -> stateObjectKey [ label=",", color="black" ];
  stateObjectColon -> stateNone [ label="Read :", color="black" ];
  stateParent -> stateEnd [ label="Current is empty", color="blue" ];
}
